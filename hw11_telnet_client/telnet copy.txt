package main

import (
	"bufio"
	"context"
	"fmt"
	"io"
	"log"
	"net"
	"sync"
	"time"
)

type TelnetClient interface {
	Connect() error
	io.Closer
	Send() error
	Receive() error
}

func (c *telnetClient) Send() error {
	if !c.inScanner.Scan() {
		return c.inScanner.Err()
	}
	text := c.inScanner.Text()
	c.conn.Write([]byte(fmt.Sprintf("%s\n", text)))
	return nil
}

type telnetClient struct {
	Address string
	timeout time.Duration
	in      io.ReadCloser
	out     io.Writer

	inScanner  bufio.Scanner
	outScanner bufio.Scanner
	conn       net.Conn
}

func (c *telnetClient) Connect() error {
	dialer := &net.Dialer{}
	ctx, cancel := context.WithTimeout(context.Background(), c.timeout)
	defer cancel()
	var err error
	c.conn, err = dialer.DialContext(ctx, "tcp", c.Address)
	if err != nil {
		c.Close()
		cancel()
		return fmt.Errorf("dial: %w", err)
	}
	log.Printf("connect from %s to %s\n", c.conn.LocalAddr(), c.conn.RemoteAddr())
	c.inScanner = *bufio.NewScanner(in)
	c.outScanner = *bufio.NewScanner(c.conn)
	return nil
}

func (c *telnetClient) Close() error {
	var err error
	err = c.conn.Close()
	if err != nil {
		return fmt.Errorf("close connection: %w", err)
	}
	err = c.in.Close()
	if err != nil {
		return fmt.Errorf("close input: %w", err)
	}
	return nil
}

func (c *telnetClient) Receive() error {
	wg := &sync.WaitGroup{}
	wg.Add(1)
	go func() {
		for c.outScanner.Scan() {
			c.out.Write([]byte(c.outScanner.Text() + "\n"))
			if c.outScanner.Err() != nil {
				fmt.Println(c.outScanner.Err())
				return
			}
		}
		defer wg.Done()
	}()
	wg.Wait()
	return c.outScanner.Err()
}

func NewTelnetClient(address string, timeout time.Duration, in io.ReadCloser, out io.Writer) TelnetClient {
	return &telnetClient{
		Address: address,
		timeout: timeout,
		in:      in,
		out:     out,
	}
}

// Place your code here.
// P.S. Author's solution takes no more than 50 lines.
