package hw10programoptimization

import (
	"bufio"
	_ "encoding/json"
	_ "errors"
	"fmt"
	"io"
	_ "regexp"
	"strings"
)

type User struct {
	// ID       int
	// Name     string
	// Username string
	Email string
	// Phone    string
	// Password string
	// Address  string
}

type DomainStat map[string]int

func GetDomainStat(r io.Reader, domain string) (DomainStat, error) {
	u, err := getUsers(r)
	if err != nil {
		return nil, fmt.Errorf("get users error: %w", err)
	}
	return countDomains(u, domain)
}

type users [100_000]User

func getUsers(r io.Reader) (result *users, err error) {
	// rd := bufio.NewReader(r)
	result = new(users)
	scanner := bufio.NewScanner(r)
	// maxSize := 1024 * 1024
	// buffer := make([]byte, 0, maxSize)
	// scanner.Buffer(buffer, maxSize)

	var line string
	// var sizeSum int
	var user User
	var index int

	// for {

	// 	line, err = rd.ReadString('\n')
	// 	if len(line) == 0 && err != nil {
	// 		if errors.Is(err, io.EOF) {
	// 			break
	// 		}
	// 		return result, err
	// 	}
	// 	if line == "" {
	// 		continue
	// 	}
	// 	err = user.UnmarshalJSON([]byte(line))
	// 	if err != nil {
	// 		return result, err
	// 	}
	// 	// fmt.Println("rd.Size()", rd.Size())
	// 	// sizeSum += rd.Size()
	// 	// result = append(result, user)
	// 	result[index] = user
	// 	index++
	// }

	for scanner.Scan() {
		line = scanner.Text()
		if line == "" {
			continue
		}
		err = user.UnmarshalJSON([]byte(line))
		if err != nil {
			return result, err
		}
		result[index] = user
		index++
	}
	return result, nil
}

func countDomains(u *users, domain string) (DomainStat, error) {
	result := make(DomainStat)
	var email, key string
	var endsWith bool
	for _, user := range u {
		email = strings.ToLower(user.Email)
		endsWith = strings.HasSuffix(email, "."+domain)
		if endsWith {
			key = strings.SplitN(email, "@", 2)[1]
			result[key]++
		}
	}
	return result, nil
}
